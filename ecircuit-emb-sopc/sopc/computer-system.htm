<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- #BeginTemplate "sopc_template.dwt" -->

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<meta content="IE=Edge" http-equiv="X-UA-Compatible" />
<!-- #BeginEditable "doctitle" -->
<title>Computer System</title>
<!-- #EndEditable -->
<!-- #BeginEditable "description" -->
<meta content="insert DESCRIPTION here" name="description" />
<!-- #EndEditable -->
<meta content="en-us" http-equiv="Content-Language" />
<meta content="General" name="rating" />
<meta content="no" http-equiv="imagetoolbar" />
<meta content="Copyright 2015, Pat Geary  http://genealogy-web-creations.com/ All Rights Reserved" name="copyright" />
<!-- 
*********************************
Design by: Genealogy Web Creations
http://www.genealogy-web-creations.com/
Release Date: May 2015
*********************************
-->
<!-- main css -->
<link href="../styles/site.css" rel="stylesheet" type="text/css" />
<!-- media queries css -->
<link href="../styles/media-queries.css" rel="stylesheet" type="text/css" />
<!-- css3-mediaqueries.js for IE less than 9 --><!--[if lt IE 9]>
<script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js">


</script>
<![endif]-->
<meta content="width=device-width; initial-scale=1.0" name="viewport" />
</head>

<body>

<!-- Page Container begins here -->
<div id="outerWrapper">
	<!-- Masthead begins here -->
	<div id="header">
		<img alt="" src="../images/title_pic.png" style="height: 170px; width: 699px" /></div>
	<!-- Masthead ends here -->
	<!-- Top Navigation begins here -->
	<div id="topNavigation">
		<ul>
			<li><a href="../index.html" title="Home">主页</a></li>
			<li><a href="../about.html" title="About">关于</a></li>
			<li><a href="../contact.html" title="Contact">联系</a></li>
			<li><a href="../links.html" title="Links">课程</a></li>
			<li><a href="../search.html" title="Search">搜索</a></li>
			<li><a href="../site-map.html" title="Site Map">站点地图</a></li>
		</ul>
	</div>
	<!-- Top Navigation ends here -->
	<!-- Columns Container begins here -->
	<div id="contentWrapper">
		<!-- Left Sidebar Begins Here	-->
		<div id="leftColumn1">
			<!--	Sectional Menu Begins Here	-->
			<p class="heading">课程</p>
			<ul>
				<li><a href="../sopc/目录.htm" title="SOPC">SOPC</a></li>
				<li><a href="../embeddedsys/coming.html" title="嵌入式系统应用">嵌入式系统应用</a></li>
				<li><a href="../ecircuit/from-name.htm" title="电子线路设计">电子线路设计</a></li>
			</ul>
			
			<!--	Sectional Menu ends Here	-->
			<p class="heading">教学相长</p>
			<p>认真教书，认真学习</p>
		</div>
		<!-- Left Sidebar ends Here	-->
		<!--Main Content Area Begins Here-->
		<div id="content">
			<div style="color: red; background-color: #000000;"  >
					<div id="content1" onclick="document.all.child1.style.display=(document.all.child1.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第一章 概述</div> 
					<div id="child1" align="left" style="display:none"> 
						1.<a href="SOPC基本概念.htm">SOPC系统的基本概念</a> <br> 
						2.<a href="IP-core.htm">IP核</a> <br> 
						3.<a href="sopc-dev-process.htm">SOPC开发基本流程</a> <br> 
						4.<a href="NiosII-introduction.htm">Nios II处理器介绍</a> <br>
						5.<a href="FPGA-implemented-sopc.htm">用FPGA实现SOPC</a><br>
						6.<a href="nios-app.htm">应用</a><br>
					</div> 
					
					<div id="content2" onclick="document.all.child2.style.display=(document.all.child2.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第二章 Nios II处理器体系结构 </div> 
					<div id="child2" align="left" style="display:none"> 
						1.<a href="NiosII-architecture.htm">Nios II处理器结构</a> <br> 
						2.<a href="Nios-architecture/nios-register.htm">Nios II寄存器的配置</a> <br> 
						3.<a href="Nios-architecture/nios-alu.htm">ALU</a> <br>
						4.<a href="Nios-architecture/operating-modes.htm">Nios II处理器运行模式及</a><br>
						  <a href="Nios-architecture/exception.htm">异常和中断</a> <br>
						5.<a href="Nios-architecture/memory.htm">存储器和外设访问</a><br>
						附录：<a href="Nios-architecture/implement-cpu-instruction.htm">计算机指令执行</a><br>
					</div> 
					<div id="content3" onclick="document.all.child3.style.display=(document.all.child3.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第三章 Avalon接口规范 </div> 
					<div id="child3" style="display:none"> 
						1.<a href="avalon/avalon-introduction.htm">Avalon总线简介</a> <br> 
						2.<a href="avalon/avalon-concept.htm">Avalon总线基本概念</a> <br> 
						3.<a href="avalon/avalon-signal.htm">Avalon信号</a>  <br>
						4.<a href="avalon/avalon-slave.htm">从端口传输</a> <br>
						5.<a href="avalon/avalon-master.htm">主端口传输</a> <br>
						6.<a href="avalon/avalon-streaming.htm">流水线传输</a> <br>
						7.<a href="avalon/avalon-tristate.htm">三态传输</a> <br>
					</div> 
					
					<div id="content4" onclick="document.all.child5.style.display=(document.all.child5.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第四章 SOPC软硬件开发平台 </div> 
					<div id="child5" style="display:none"> 
						1.<a href="sopcdevelopment/sopc-dev-platform.htm">SOPC系统开发的软硬件平台</a> <br> 
						2.<a href="#">Quartus II下的SOPC Builder工具</a>(Qsys) <br> 
						3.<a href="#">Nios II IDE集成开发环境</a><br>
						4.<a href="sopcdevelopment/software/HAL/Nios_HAL.htm">软硬件接口的硬件抽象层（HAL)</a><br>
						5.<a href="sopcdevelopment/example-list.htm">例子</a>
					</div> 
					
					<div id="content5" onclick="document.all.child4.style.display=(document.all.child4.style.display =='none')?'':'none'" > 
					第五章 Nios II处理器常用外设 </div> 
					<div id="child4" style="display:none"> 
						1.<a href="#">并行I/O</a>(重点讲解结构) <br> 
						2.<a href="#">定时器</a> <br> 
						3.<a href="#">异步串口UART</a> <br>
						4.<a href="#">Optrex 1207 LCD</a><br>
						5.<a href="sopcdevelopment/devices/SDRAM.htm">SDRAM</a>
					</div> 
					
					<div id="content6" onclick="document.all.child6.style.display=(document.all.child6.style.display =='none')?'':'none'" > 
					第六章 μC/OS II操作系统移植 </div> 
					<div id="child6" style="display:none"> 
						1.<a href="sopcdevelopment/software/os/os.htm">操作系统概念</a> <br> 
						2.<a href="sopcdevelopment/software/os/ucos/first_ucos.htm">μC/OS II运行在Nios II</a> <br> 
						3.<a href="sopcdevelopment/software/os/ucos/ucos_api.htm">μC/OS II编程介绍</a> 
					</div> 
					
					<div id="content8" onclick="document.all.child7.style.display=(document.all.child7.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第七章 Nios II系统深入设计 </div> 
					<div id="child7" style="display:none"> 
						1.<a href="sopcdevelopment/hardware/user_instructions/user_instructions.htm">用户定制指令</a> <br> 
						2.<a href="sopcdevelopment/develop_user_devices.htm">用户定制外设</a> 
					</div>
					
					<div id="content8" onclick="document.all.child8.style.display=(document.all.child8.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第八章 调试技术 </div> 
					<div id="child8" style="display:none"> 
						1.<a href="debug-tech/hardware/ModelSim/modelsim_introduction.htm">ModelSim</a><br>
						2.<a href="debug-tech/hardware/signaltap/signaltap_introduction.htm">SignalTap</a><br>
						3.Nios EDS调试<br> 
					</div> 
			</div>
			<hr/>
			<!-- #BeginEditable "content" -->
			
<p><font size="6">Computer System</font></p>
<p><font size="5">定义</font></p>
<p>
计算机系统由计算机硬件和软件两部分组成。硬件包括中央处理机、存储器和外部设备等；软件是计算机的运行程序和相应的文档。计算机系统具有接收和存储信息、按程序快速计算和判断并输出处理结果等功能。<a href="#inference-1">[1]</a></p>
<p>“A <b>computer</b> is a general-purpose device that can be
<a title="Computer program" href="https://en.wikipedia.org/wiki/Computer_program">
programmed</a> to carry out a set of
<a title="Arithmetic" href="https://en.wikipedia.org/wiki/Arithmetic">arithmetic</a> 
or
<a title="Boolean algebra" href="https://en.wikipedia.org/wiki/Boolean_algebra">
logical</a> operations automatically. Since a sequence of operations can be 
readily changed, the computer can solve more than one kind of problem.</p>
<p>Conventionally, a computer consists of at least one processing element, 
typically a
<a title="Central processing unit" href="https://en.wikipedia.org/wiki/Central_processing_unit">
central processing unit</a> (CPU), and some form of
<a title="Memory (computers)" class="mw-redirect" href="https://en.wikipedia.org/wiki/Memory_(computers%2529">
memory</a>. The processing element carries out arithmetic and logic operations, 
and a sequencing and control unit can change the order of operations in response 
to stored <a title="Data" href="https://en.wikipedia.org/wiki/Data">information</a>.
<a title="Peripheral" href="https://en.wikipedia.org/wiki/Peripheral">Peripheral 
devices</a> allow information to be retrieved from an external source, and the 
result of operations saved and retrieved.”[2]</p>
<p><font size="5">基本结构</font></p>
<p><img border="0" src="pic/通用计算机组成.gif" width="860" height="487"><img border="0" src="pic/computer-mainboard.jpg" width="524" height="289"></p>
<p><font size="7">CPU</font></p>
<p>The <b><font size="5">control unit</font></b> (often called a control system 
or central controller) manages the computer's various components; it reads and 
interprets (decodes) the program instructions, transforming them into control 
signals that activate other parts of the computer.<sup id="cite_ref-61" class="reference"><a href="https://en.wikipedia.org/wiki/Computer#cite_note-61">[61]</a></sup> 
Control systems in advanced computers may change the order of execution of some 
instructions to improve performance.</p>
<p>A key component common to all CPUs is the
<a title="Program counter" href="https://en.wikipedia.org/wiki/Program_counter">
program counter</a>, a special memory cell (a
<a title="Processor register" href="https://en.wikipedia.org/wiki/Processor_register">
register</a>) that keeps track of which location in memory the next instruction 
is to be read from.<sup id="cite_ref-62" class="reference"><a href="https://en.wikipedia.org/wiki/Computer#cite_note-62">[62]</a></sup></p>
<p>The control system's function is as follows—note that this is a simplified 
description, and some of these steps may be performed concurrently or in a 
different order depending on the type of CPU:</p>
<ol>
	<li>Read the code for the next instruction from the cell indicated by the 
	program counter.</li>
	<li>Decode the numerical code for the instruction into a set of commands or 
	signals for each of the other systems.</li>
	<li>Increment the program counter so it points to the next instruction.</li>
	<li>Read whatever data the instruction requires from cells in memory (or 
	perhaps from an input device). The location of this required data is 
	typically stored within the instruction code.</li>
	<li>Provide the necessary data to an ALU or register.</li>
	<li>If the instruction requires an ALU or specialized hardware to complete, 
	instruct the hardware to perform the requested operation.</li>
	<li>Write the result from the ALU back to a memory location or to a register 
	or perhaps an output device.</li>
	<li>Jump back to step (1).</li>
</ol>
<p><font size="5">逻辑结构</font></p>
<p><img border="0" src="pic/370px-ABasicComputer.gif" width="370" height="285"></p>
<p>Block diagram of a basic uniprocessor-CPU computer. <br>
Black lines indicate data flow, whereas red lines indicate control flow; arrows 
indicate flow directions.</p>
<p><font size="5">物理结构</font></p>
<p><img border="0" src="pic/Intel80486DX2.jpg" width="565" height="424"></p>
<p>
<a title="Die (integrated circuit)" href="https://en.wikipedia.org/wiki/Die_(integrated_circuit%2529">
Die</a> of an
<a title="Intel 80486DX2" href="https://en.wikipedia.org/wiki/Intel_80486DX2">
Intel 80486DX2</a> microprocessor (actual size: 12×6.75&nbsp;mm) in its packaging</p>
<p><font size="5">运行</font></p>
<p>The fundamental operation of most CPUs, regardless of the physical form they 
take, is to <b>execute a sequence of stored instructions</b> called a program. 
The instructions are kept in some kind of computer memory. There are three 
steps, also known as instruction cycle, that nearly all CPUs follow in their 
operation:<b> fetch, decode, and execute</b>.</p>
<p><b>Fetch </b></p>
<p>The first step, fetch, involves retrieving an instruction (which is 
represented by a number or sequence of numbers) from program memory. The 
instruction's location (address) in program memory is determined by a program 
counter (PC), which stores a number that identifies the address of the next 
instruction to be fetched. After an instruction is fetched, the PC is 
incremented by the length of the instruction so that it will contain the address 
of the next instruction in the sequence.[d] Often, the instruction to be fetched 
must be retrieved from relatively slow memory, causing the CPU to stall while 
waiting for the instruction to be returned. This issue is largely addressed in 
modern processors by caches and pipeline architectures (see below). </p>
<p><b>Decode </b></p>
<p>The instruction that the CPU fetches from memory determines what the CPU will 
do. In the decode step, performed by the circuitry known as the instruction 
decoder, the instruction is converted into signals that control other parts of 
the CPU. </p>
<p>The way in which the instruction is interpreted is defined by the CPU's 
instruction set architecture (ISA).[e] Often, one group of bits (that is, a 
"field") within the instruction, called the opcode, indicates which operation is 
to be performed, while the remaining fields usually provide supplemental 
information required for the operation, such as the operands. Those operands may 
be specified as a constant value (called an immediate value), or as the location 
of a value that may be a processor register or a memory address, as determined 
by some addressing mode. </p>
<p>In some CPU designs the instruction decoder is implemented as a hardwired, 
unchangeable circuit. In others, a microprogram is used to translate 
instructions into sets of CPU configuration signals that are applied 
sequentially over multiple clock pulses. In some cases the memory that stores 
the microprogram is rewritable, making it possible to change the way in which 
the CPU decodes instructions. </p>
<p><b>Execute </b></p>
<p>After the fetch and decode steps, the execute step is performed. Depending on 
the CPU architecture, this may consist of a single action or a sequence of 
actions. During each action, various parts of the CPU are electrically connected 
so they can perform all or part of the desired operation and then the action is 
completed, typically in response to a clock pulse. Very often the results are 
written to an internal CPU register for quick access by subsequent instructions. 
In other cases results may be written to slower, but less expensive and higher 
capacity main memory. </p>
<p>For example, if an addition instruction is to be executed, the arithmetic 
logic unit (ALU) inputs are connected to a pair of operand sources (numbers to 
be summed), the ALU is configured to perform an addition operation so that the 
sum of its operand inputs will appear at its output, and the ALU output is 
connected to storage (e.g., a register or memory) that will receive the sum. 
When the clock pulse occurs, the sum will be transferred to storage and, if the 
resulting sum is too large (i.e., it is larger than the ALU's output word size), 
an arithmetic overflow flag will be set.</p>
<p><font size="7">I/O</font></p>
<p>　</p>
<p><font size="7">总线</font></p>
<p>总线（Bus）是计算机各种功能部件之间传送信息的公共通信干线，它是由导线组成的传输线束， 
按照计算机所传输的信息种类，计算机的总线可以划分为数据总线、地址总线和控制总线，分别用来传输数据、数据地址和控制信号。总线是一种内部结构，它是cpu、内存、输入、输出设备传递信息的公用通道，主机的各个部件通过总线相连接，外部设备通过相应的接口电路再与总线相连接，从而形成了计算机硬件系统。在计算机系统中，各个部件之间传送信息的公共通路叫总线，微型计算机是以总线结构来连接各个功能部件的。 </p>
<p>如果说主板（Mother 
Board）是一座城市，那么总线就像是城市里的公共汽车（bus），能按照固定行车路线，传输来回不停运作的比特（bit）。这些线路在同一时间内都仅能负责传输一个比特。因此，必须同时采用多条线路才能传送更多数据，而总线可同时传输的数据数就称为宽度（width），以比特为单位，总线宽度愈大，传输性能就愈佳。总线的带宽（即单位时间内可以传输的总数据数）为：总线带宽 
= 频率 x 
宽度（Bytes/sec）。当总线空闲（其他器件都以高阻态形式连接在总线上）且一个器件要与目的器件通信时，发起通信的器件驱动总线，发出地址和数据。其他以高阻态形式连接在总线上的器件如果收到（或能够收到）与自己相符的地址信息后，即接收总线上的数据。发送器件完成通信，将总线让出（输出变为高阻态）。 </p>
<pre><font size="3"><b>总线按功能和规范可分为五大类型:</b></font></pre>
<pre><font size="3">●数据总线（Data Bus）：在CPU与RAM之间来回传送需要处理或是需要储存的数据。
●地址总线（Address Bus）：用来指定在RAM（Random Access Memory）之中储存的数据的地址。
●控制总线（Control Bus）：将微处理器控制单元（Control Unit）的信号，传送到周边设备，一般常见的为 USB Bus和1394 Bus。
●扩展总线（Expansion Bus）：可连接扩展槽和电脑。
●局部总线（Local Bus）：取代更高速数据传输的扩展总线。</font></pre>
<div class="body-wrapper" jQuery111107039573256727867="176">
	<div class="content-wrapper" jQuery111107039573256727867="178">
		<div class="content" jQuery111107039573256727867="179">
			<div class="main-content" jQuery111107039573256727867="180">
				<pre><font size="3"><b>总线特性</b></font></pre>
				<div class="para" jQuery111107039573256727867="310">
					由于总线是连接各个部件的一组信号线。通过信号线上的信号表示信息，通过约定不同信号的先后次序即可约定操作如何实现。总线的特性如下</div>
				<p>（1）物理特性：</p>
				<div class="para" jQuery111107039573256727867="314">
					物理特性又称为机械特性，指总线上部件在物理连接时表现出的一些特性，如插头与插座的几何尺寸、形状、引脚个数及排列顺序等。</div>
				<p>（2）功能特性：<br jQuery111107039573256727867="317">
				　　功能特性是指每一根信号线的功能，如地址总线用来表示地址码。数据总线用来表示传输的数据，控制总线表示总线上操作的命令、状态等。</p>
				<p>（3）电气特性：<br jQuery111107039573256727867="321">
				　　电气特性是指每一根信号线上的信号方向及表示信号有效的电平范围，通常，由主设备（如CPU）发出的信号称为输出信号（OUT），送入主设备的信号称为输入信号（IN）。通常数据信号和地址信号定义高电平为逻辑1、低电平为逻辑0，控制信号则没有俗成的约定，如WE表示低电平有有效、Ready表示高电平有效。不同总线高电平、低电平的电平范围也无统一的规定，通常与TTL是相符的。</p>
				<p>（4）时间特性：<br jQuery111107039573256727867="324">
				　　时间特性又称为逻辑特性，指在总线操作过程中每一根信号线上信号什么时候有效，通过这种信号有效的时序关系约定，确保了总线操作的正确进行。<br jQuery111107039573256727867="325">
				　　为了提高计算机的可拓展性，以及部件及设备的通用性，除了片内总线外，各个部件或设备都采用标准化的形式连接到总线上，并按标准化的方式实现总线上的信息传输。而总线的这些标准化的连接形式及操作方式，统称为总线标准。如ISA、PCI、USB总线标准等，相应的，采用这些标准的总线为ISA总线、PCI总线、USB总线等。</div>
		</div>
	</div>
</div>
<pre>
</pre>
<p><font size="7">软件</font></p>
<p><img border="0" src="pic/winNT.gif" width="457" height="451">windows 
NT的操作系统结构</p>
<p><b><a href="WINDOWS-API.htm">用户编程接口</a></b></p>
<p>　</p>
<p>参考文献</p>
<ol>
	<li><a name="inference-1"></a>计算机系统，<a href="http://baike.baidu.com/link?url=09SZSOSoUzSNk_93KQxxJiKFu-_CVzhlAzHCigWSjtXdFd3ZK_I4rWSjB3iDwjNxuF0mMY8DpbKP3X9DUUjVZ_">http://baike.baidu.com/link?url=09SZSOSoUzSNk_93KQxxJiKFu-_CVzhlAzHCigWSjtXdFd3ZK_I4rWSjB3iDwjNxuF0mMY8DpbKP3X9DUUjVZ_</a></li>
	<li><a href="https://en.wikipedia.org/wiki/Computer_system">
	https://en.wikipedia.org/wiki/Computer_system</a></li>
	<li>CPU的工作过程,<a href="https://software.intel.com/zh-cn/articles/book-Processor-Architecture_CPU_work_process/">https://software.intel.com/zh-cn/articles/book-Processor-Architecture_CPU_work_process/</a></li>
	<li>
	<a target="_blank" href="http://v.youku.com/v_show/id_XMjQyMDAyMTUy.html">
	<span style="font-size:18px;" lang="EN-US">Intel CPU</span><span style="font-size:18px;">制作流程</span></a>，<a href="http://v.youku.com/v_show/id_XMjQyMDAyMTUy.html">http://v.youku.com/v_show/id_XMjQyMDAyMTUy.html</a></li>
	<li>
	<a target="_blank" href="http://v.youku.com/v_show/id_XMzcyODU1NDIw.html">
	<span style="font-size:18px;" lang="EN-US">AMD</span><span style="font-size:18px;">芯片的制作流程</span></a>，<a href="http://v.youku.com/v_show/id_XMzcyODU1NDIw.html">http://v.youku.com/v_show/id_XMzcyODU1NDIw.html</a></li>
	<li><a href="http://blog.chinaunix.net/uid-23069658-id-3563960.html">
	CPU的内部架构和工作原理</a>，http://blog.chinaunix.net/uid-23069658-id-3563960.html</li>
</ol>

			<!-- #EndEditable --></div>
		<!--Main Content Area Ends Here--></div>
	<!-- Columns Container ends here -->
	<!-- Footer begins here -->
	<div id="footer">
		
		<p class="smltxt">模板来自于:
		<a href="http://www.genealogy-web-creations.com/" title="Genealogy Web Creations.">
		Genealogy Web Creations</a> </p>
		<p class="smltxt">Template Updated: May 2015 </p>
		<p class="smltxt"><a href="http://www.miitbeian.gov.cn/" title="备案后">京ICP备15041520号</a></p>
	</div>
	<!-- Footer ends here -->
	<!-- Page Container ends here --></div>

</body>

<!-- #EndTemplate -->

</html>

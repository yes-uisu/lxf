<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- #BeginTemplate "../sopc_template.dwt" -->

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<meta content="IE=Edge" http-equiv="X-UA-Compatible" />
<!-- #BeginEditable "doctitle" -->
<title>computer programming language</title>
<!-- #EndEditable -->
<!-- #BeginEditable "description" -->
<meta content="insert DESCRIPTION here" name="description" />
<!-- #EndEditable -->
<meta content="en-us" http-equiv="Content-Language" />
<meta content="General" name="rating" />
<meta content="no" http-equiv="imagetoolbar" />
<meta content="Copyright 2015, Pat Geary  http://genealogy-web-creations.com/ All Rights Reserved" name="copyright" />
<!-- 
*********************************
Design by: Genealogy Web Creations
http://www.genealogy-web-creations.com/
Release Date: May 2015
*********************************
-->
<!-- main css -->
<link href="../../styles/site.css" rel="stylesheet" type="text/css" />
<!-- media queries css -->
<link href="../../styles/media-queries.css" rel="stylesheet" type="text/css" />
<!-- css3-mediaqueries.js for IE less than 9 --><!--[if lt IE 9]>
<script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js">


</script>
<![endif]-->
<meta content="width=device-width; initial-scale=1.0" name="viewport" />
</head>

<body>

<!-- Page Container begins here -->
<div id="outerWrapper">
	<!-- Masthead begins here -->
	<div id="header">
		<img alt="" src="../../images/title_pic.png" style="height: 170px; width: 699px" /></div>
	<!-- Masthead ends here -->
	<!-- Top Navigation begins here -->
	<div id="topNavigation">
		<ul>
			<li><a href="../../index.html" title="Home">主页</a></li>
			<li><a href="../../about.html" title="About">关于</a></li>
			<li><a href="../../contact.html" title="Contact">联系</a></li>
			<li><a href="../../links.html" title="Links">课程</a></li>
			<li><a href="../../search.html" title="Search">搜索</a></li>
			<li><a href="../../site-map.html" title="Site Map">站点地图</a></li>
		</ul>
	</div>
	<!-- Top Navigation ends here -->
	<!-- Columns Container begins here -->
	<div id="contentWrapper">
		<!-- Left Sidebar Begins Here	-->
		<div id="leftColumn1">
			<!--	Sectional Menu Begins Here	-->
			<p class="heading">课程</p>
			<ul>
				<li><a href="../目录.htm" title="SOPC">SOPC</a></li>
				<li><a href="../../embeddedsys/coming.html" title="嵌入式系统应用">嵌入式系统应用</a></li>
				<li><a href="../../ecircuit/from-name.htm" title="电子线路设计">电子线路设计</a></li>
			</ul>
			
			<!--	Sectional Menu ends Here	-->
			<p class="heading">教学相长</p>
			<p>认真教书，认真学习</p>
		</div>
		<!-- Left Sidebar ends Here	-->
		<!--Main Content Area Begins Here-->
		<div id="content">
			<div style="color: red; background-color: #000000;"  >
					<div id="content1" onclick="document.all.child1.style.display=(document.all.child1.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第一章 概述</div> 
					<div id="child1" align="left" style="display:none"> 
						1.<a href="../SOPC基本概念.htm">SOPC系统的基本概念</a> <br> 
						2.<a href="../IP-core.htm">IP核</a> <br> 
						3.<a href="../sopc-dev-process.htm">SOPC开发基本流程</a> <br> 
						4.<a href="../NiosII-introduction.htm">Nios II处理器介绍</a> <br>
						5.<a href="../FPGA-implemented-sopc.htm">用FPGA实现SOPC</a><br>
						6.<a href="../nios-app.htm">应用</a><br>
					</div> 
					
					<div id="content2" onclick="document.all.child2.style.display=(document.all.child2.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第二章 Nios II处理器体系结构 </div> 
					<div id="child2" align="left" style="display:none"> 
						1.<a href="../NiosII-architecture.htm">Nios II处理器结构</a> <br> 
						2.<a href="nios-register.htm">Nios II寄存器的配置</a> <br> 
						3.<a href="nios-alu.htm">ALU</a> <br>
						4.<a href="operating-modes.htm">Nios II处理器运行模式及</a><br>
						  <a href="exception.htm">异常和中断</a> <br>
						5.<a href="memory.htm">存储器和外设访问</a><br>
						附录：<a href="implement-cpu-instruction.htm">计算机指令执行</a><br>
					</div> 
					<div id="content3" onclick="document.all.child3.style.display=(document.all.child3.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第三章 Avalon接口规范 </div> 
					<div id="child3" style="display:none"> 
						1.<a href="../avalon/avalon-introduction.htm">Avalon总线简介</a> <br> 
						2.<a href="../avalon/avalon-concept.htm">Avalon总线基本概念</a> <br> 
						3.<a href="../avalon/avalon-signal.htm">Avalon信号</a>  <br>
						4.<a href="../avalon/avalon-slave.htm">从端口传输</a> <br>
						5.<a href="../avalon/avalon-master.htm">主端口传输</a> <br>
						6.<a href="../avalon/avalon-streaming.htm">流水线传输</a> <br>
						7.<a href="../avalon/avalon-tristate.htm">三态传输</a> <br>
					</div> 
					
					<div id="content4" onclick="document.all.child5.style.display=(document.all.child5.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第四章 SOPC软硬件开发平台 </div> 
					<div id="child5" style="display:none"> 
						1.<a href="../sopcdevelopment/sopc-dev-platform.htm">SOPC系统开发的软硬件平台</a> <br> 
						2.<a href="#">Quartus II下的SOPC Builder工具</a>(Qsys) <br> 
						3.<a href="#">Nios II IDE集成开发环境</a><br>
						4.<a href="../sopcdevelopment/software/HAL/Nios_HAL.htm">软硬件接口的硬件抽象层（HAL)</a><br>
						5.<a href="../sopcdevelopment/example-list.htm">例子</a>
					</div> 
					
					<div id="content5" onclick="document.all.child4.style.display=(document.all.child4.style.display =='none')?'':'none'" > 
					第五章 Nios II处理器常用外设 </div> 
					<div id="child4" style="display:none"> 
						1.<a href="#">并行I/O</a>(重点讲解结构) <br> 
						2.<a href="#">定时器</a> <br> 
						3.<a href="#">异步串口UART</a> <br>
						4.<a href="#">Optrex 1207 LCD</a><br>
						5.<a href="../sopcdevelopment/devices/SDRAM.htm">SDRAM</a>
					</div> 
					
					<div id="content6" onclick="document.all.child6.style.display=(document.all.child6.style.display =='none')?'':'none'" > 
					第六章 μC/OS II操作系统移植 </div> 
					<div id="child6" style="display:none"> 
						1.<a href="../sopcdevelopment/software/os/os.htm">操作系统概念</a> <br> 
						2.<a href="../sopcdevelopment/software/os/ucos/first_ucos.htm">μC/OS II运行在Nios II</a> <br> 
						3.<a href="../sopcdevelopment/software/os/ucos/ucos_api.htm">μC/OS II编程介绍</a> 
					</div> 
					
					<div id="content8" onclick="document.all.child7.style.display=(document.all.child7.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第七章 Nios II系统深入设计 </div> 
					<div id="child7" style="display:none"> 
						1.<a href="../sopcdevelopment/hardware/user_instructions/user_instructions.htm">用户定制指令</a> <br> 
						2.<a href="../sopcdevelopment/develop_user_devices.htm">用户定制外设</a> 
					</div>
					
					<div id="content8" onclick="document.all.child8.style.display=(document.all.child8.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第八章 调试技术 </div> 
					<div id="child8" style="display:none"> 
						1.<a href="../debug-tech/hardware/ModelSim/modelsim_introduction.htm">ModelSim</a><br>
						2.<a href="../debug-tech/hardware/signaltap/signaltap_introduction.htm">SignalTap</a><br>
						3.Nios EDS调试<br> 
					</div> 
			</div>
			<hr/>
			<!-- #BeginEditable "content" -->
			
<p><font size="7">computer programming language</font></p>
<p><font size="7">计算机编程语言</font></p>
<p>　</p>
<p><font size="5">机器指令</font></p>
<p><font size="5">汇编语言</font></p>
<p><font size="5">高级语言</font></p>
<p>　</p>
<p><b><font size="5">机器指令</font></b></p>
<div class="body-wrapper" jQuery11110976191705639275="175">
	<div class="content-wrapper" jQuery11110976191705639275="177">
		<div class="content" jQuery11110976191705639275="178">
			<div class="main-content" jQuery11110976191705639275="179">
				<div class="lemma-summary" jQuery11110976191705639275="205">
					<div class="para" jQuery11110976191705639275="206">
						机器指令（Machine 
						Instructions）是CPU能直接识别并执行的指令，它的表现形式是二进制编码。机器指令通常由操作码和操作数两部分组成，操作码指出该指令所要完成的操作，即指令的功能，操作数指出参与运算的对象，以及运算结果所存放的位置等。<p>
						（以下来自wikipedia 的instruction set）</p>
						<div id="content9" class="mw-body" role="main">
							<div id="bodyContent" class="mw-body-content">
								<div dir="ltr" id="mw-content-text" lang="en" class="mw-content-ltr">
									<h2>
									<span id="Machine_language" class="mw-headline">
									<span id="NATIVE"></span>Machine language</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a title="Edit section: Machine language" href="https://en.wikipedia.org/w/index.php?title=Instruction_set&action=edit&section=3">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
									<p>Machine language is built up from 
									discrete <i>statements</i> or <i>
									instructions</i>. On the processing 
									architecture, a given instruction may 
									specify:</p>
									<ul>
										<li>Particular
										<a title="Processor register" href="https://en.wikipedia.org/wiki/Processor_register">
										registers</a> for arithmetic, 
										addressing, or control functions</li>
										<li>Particular memory locations or 
										offsets</li>
										<li>Particular
										<a title="Addressing mode" href="https://en.wikipedia.org/wiki/Addressing_mode">
										addressing modes</a> used to interpret 
										the operands</li>
									</ul>
									<p>More complex operations are built up by 
									combining these simple instructions, which 
									are executed sequentially, or as otherwise 
									directed by
									<a title="Control flow" href="https://en.wikipedia.org/wiki/Control_flow">
									control flow</a> instructions.</p>
									<h3>
									<span id="Instruction_types" class="mw-headline">
									Instruction types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a title="Edit section: Instruction types" href="https://en.wikipedia.org/w/index.php?title=Instruction_set&action=edit&section=4">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
									<p>Examples of operations common to many 
									instruction sets include:</p>
									<h4>
									<span id="Data_handling_and_memory_operations" class="mw-headline">
									Data handling and memory operations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a title="Edit section: Data handling and memory operations" href="https://en.wikipedia.org/w/index.php?title=Instruction_set&action=edit&section=5">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
									<ul>
										<li><i>Set</i> a
										<a title="Processor register" href="https://en.wikipedia.org/wiki/Processor_register">
										register</a> to a fixed constant value.</li>
										<li><i>Copy</i> data from a memory 
										location to a register, or vice-versa (a 
										machine instruction is often called <i>
										move</i>, however the term is 
										misleading). Used to store the contents 
										of a register, result of a computation, 
										or to retrieve stored data to perform a 
										computation on it later.</li>
										<li><i>Read</i> and <i>write</i> data 
										from hardware devices.</li>
									</ul>
									<h4>
									<span id="Arithmetic_and_logic_operations" class="mw-headline">
									<a class="mw-redirect" title="Arithmetic and logic unit" href="https://en.wikipedia.org/wiki/Arithmetic_and_logic_unit">
									Arithmetic and logic</a> operations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a title="Edit section: Arithmetic and logic operations" href="https://en.wikipedia.org/w/index.php?title=Instruction_set&action=edit&section=6">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
									<ul>
										<li><i>Add</i>, <i>subtract</i>, <i>
										multiply</i>, or <i>divide</i> the 
										values of two registers, placing the 
										result in a register, possibly setting 
										one or more
										<a class="mw-redirect" title="Flag (computing)" href="https://en.wikipedia.org/wiki/Flag_(computing)">
										condition codes</a> in a
										<a title="Status register" href="https://en.wikipedia.org/wiki/Status_register">
										status register</a>.</li>
										<li>Perform
										<a title="Bitwise operation" href="https://en.wikipedia.org/wiki/Bitwise_operation">
										bitwise operations</a>, e.g., taking the
										<i>
										<a title="Logical conjunction" href="https://en.wikipedia.org/wiki/Logical_conjunction">
										conjunction</a></i> and <i>
										<a title="Logical disjunction" href="https://en.wikipedia.org/wiki/Logical_disjunction">
										disjunction</a></i> of corresponding 
										bits in a pair of registers, taking the
										<i>
										<a class="mw-redirect" title="Logical negation" href="https://en.wikipedia.org/wiki/Logical_negation">
										negation</a></i> of each bit in a 
										register.</li>
										<li><i>Compare</i> two values in 
										registers (for example, to see if one is 
										less, or if they are equal).</li>
									</ul>
									<h4>
									<span id="Control_flow_operations" class="mw-headline">
									<a title="Control flow" href="https://en.wikipedia.org/wiki/Control_flow">
									Control flow</a> operations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a title="Edit section: Control flow operations" href="https://en.wikipedia.org/w/index.php?title=Instruction_set&action=edit&section=7">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
									<ul>
										<li><i>
										<a title="Branch (computer science)" href="https://en.wikipedia.org/wiki/Branch_(computer_science)">
										Branch</a></i> to another location in 
										the program and execute instructions 
										there.</li>
										<li><i>
										<a title="Branch predication" href="https://en.wikipedia.org/wiki/Branch_predication">
										Conditionally branch</a></i> to another 
										location if a certain condition holds.</li>
										<li><i>
										<a title="Indirect branch" href="https://en.wikipedia.org/wiki/Indirect_branch">
										Indirectly branch</a></i> to another 
										location.</li>
										<li><i>
										<a title="Subroutine" href="https://en.wikipedia.org/wiki/Subroutine">
										Call</a></i> another block of code, 
										while saving the location of the next 
										instruction as a point to return to.</li>
									</ul>
								</div>
							</div>
						</div>
						<p><b><font size="5">汇编语言</font></b></p>
						<div class="body-wrapper" jQuery111101971546700704876="178">
							<div class="content-wrapper" jQuery111101971546700704876="197">
								<div class="content" jQuery111101971546700704876="198">
									<div class="main-content" jQuery111101971546700704876="199">
										<div class="lemma-summary" jQuery111101971546700704876="226">
											<div class="para" jQuery111101971546700704876="227">
												（一下来自百度百科-汇编语言 第一段）<p>
												汇编语言（assembly language）是一种用于<a target="_blank" jQuery111101971546700704876="228" href="http://baike.baidu.com/view/6373.htm">电子计算机</a>、<a target="_blank" jQuery111101971546700704876="229" href="http://baike.baidu.com/view/1125.htm">微处理器</a>、<a target="_blank" jQuery111101971546700704876="230" href="http://baike.baidu.com/view/368297.htm">微控制器</a>或其他可编程器件的低级语言，亦称为符号语言。在汇编语言中，用<a target="_blank" jQuery111101971546700704876="231" href="http://baike.baidu.com/view/4232760.htm">助记符</a>（Mnemonics）代替<a target="_blank" jQuery111101971546700704876="232" href="http://baike.baidu.com/view/2062994.htm">机器指令</a>的<a target="_blank" jQuery111101971546700704876="233" href="http://baike.baidu.com/view/178197.htm">操作码</a>，用地址符号（Symbol）或标号（Label）代替指令或<a target="_blank" jQuery111101971546700704876="234" href="http://baike.baidu.com/view/420846.htm">操作数</a>的地址。在不同的设备中，汇编语言对应着不同的机器语言<a target="_blank" jQuery111101971546700704876="235" href="http://baike.baidu.com/view/9174.htm">指令集</a>，通过汇编过程转换成机器指令。普遍地说，特定的汇编语言和特定的机器语言指令集是一一对应的,不同平台之间不可直接移植。<sup jQuery111101971546700704876="236">[1]</sup><a class="sup-anchor" name="ref_[1]_9383831" jQuery111101971546700704876="237">&nbsp;</a>
											</div>
											<div class="para" jQuery111101971546700704876="238">
												许多汇编程序为程序开发、<a target="_blank" jQuery111101971546700704876="239" href="http://baike.baidu.com/view/33704.htm">汇编</a>控制、辅助调试提供了额外的支持机制。有的汇编语言编程工具经常会提供宏，它们也被称为宏汇编器。</div>
											<div class="para" jQuery111101971546700704876="240">
												汇编语言不像其他大多数的<a target="_blank" jQuery111101971546700704876="241" href="http://baike.baidu.com/view/128511.htm">程序设计语言</a>一样被广泛用于程序设计。在今天的实际应用中，它通常被应用在底层，硬件操作和高要求的程序优化的场合。驱动程序、嵌入式操作系统和实时运行程序都需要汇编语言。<p>
												（以下来自于wikipedia assembly 
												language）</div>
										</div>
									</div>
								</div>
							</div>
						</div>
						<p>An assembly language (or assembler language[1]) is a 
						low-level programming language for a computer, or other 
						programmable device, in which there is a very strong 
						(generally one-to-one) <b>correspondence between the 
						language and the architecture's machine code 
						instructions</b>. Each assembly language is specific to 
						a particular computer architecture, in contrast to most 
						high-level programming languages, which are generally 
						portable across multiple architectures, but require 
						interpreting or compiling. </p>
						<div id="content0" class="mw-body" role="main">
							<div id="bodyContent0" class="mw-body-content">
								<div dir="ltr" id="mw-content-text0" lang="en" class="mw-content-ltr">
									For example, the instruction below tells an
									<a title="X86" href="https://en.wikipedia.org/wiki/X86">
									x86</a>/IA-32（x86 is a family of backward 
									compatible instruction set architectures 
									based on the Intel 8086 CPU and its Intel 
									8088 variant. IA-32 is short for "Intel 
									Architecture, 32-bit", sometimes also called 
									i386.IA-32 is the 32-bit version of the x86 
									architecture.） processor to move an 
									immediate 8-bit value into a register. The 
									binary code for <b>t<font color="#FF0000">his 
									instruction is 10110</font> followed by a 
									3-bit identifier for which register to use</b>. 
									The <b><font color="#0000FF">identifier for 
									the <i>AL</i> register is 000</font>,</b> so 
									the following machine code loads the <i>AL</i> 
									register with the <font color="#FF00FF">data 
									01100001</font>.<pre><font size="5" color="#FF0000">10110</font><font size="5"><font color="#0000FF">000</font> <font color="#FF00FF">01100001</font></font>
</pre>
									<p>This binary computer code can be made <b>
									more human-readable by expressing it in 
									hexadecimal</b> as follows.</p>
									<pre><font size="5">B0 61
</font></pre>
									<p>Here, <code>B0</code> means 'Move a copy 
									of the following value into <i>AL'</i>, and
									<code>61</code> is a hexadecimal 
									representation of the value 01100001, which 
									is 97 in decimal. Assembly language for the 
									8086 family provides the mnemonic MOV (an 
									abbreviation of <i>move</i>) for 
									instructions such as this, so the <b>machine 
									code above can be written as follows in 
									assembly language</b>, complete with an 
									explanatory comment if required, after the 
									semicolon. This is much easier to read and 
									to remember.</p>
									<div dir="ltr" class="mw-highlight mw-content-ltr">
										<pre><span class="nf"><font size="5">MOV</font></span><font size="5"> <span class="nb">AL</span><span class="p">,</span> <span class="mh">61h</span>       </font><span class="c1"><font size="5">; Load AL with 97 decimal (61 hex)</font></span>
</pre>
										<pre><b><font size="5">高级语言</font></b></pre>
										<pre>（以下来自百度百科-高级语言）</pre>
										<p><font size="5">高级语言（High-level 
										programming language）相对于机器语言（machine 
										language，是一种<a target="_blank" jQuery111103155464015396413="214" href="http://baike.baidu.com/view/178461.htm">指令</a>集的体系。这种指令集，称<a target="_blank" jQuery111103155464015396413="215" href="http://baike.baidu.com/view/52.htm">机器码</a>（machine 
										code），是电脑的CPU可直接解读的数据）而言。是高度封装了的<a target="_blank" jQuery111103155464015396413="217" href="http://baike.baidu.com/view/552871.htm">编程语言</a>，与低级语言相对。它是以人类的日常语言为基础的一种编程语言，使用一般人易于接受的文字来表示（例如汉字、不规则英文或其他外语），从而使程序编写员编写更容易，亦有较高的可读性，以方便对电脑认知较浅的人亦可以大概明白其内容。</font></p>
										<div class="body-wrapper" jQuery111103155464015396413="177">
											<div class="content-wrapper" jQuery111103155464015396413="179">
												<div class="content" jQuery111103155464015396413="180">
													<div class="main-content" jQuery111103155464015396413="181">
														<div class="para" jQuery111103155464015396413="277">
															<a target="_blank" jQuery111103155464015396413="278" href="http://baike.baidu.com/view/128511.htm">
															<font size="5">
															程序设计语言</font></a><font size="5">的类型：</font></div>
														<ol class="custom_cn para-list list-paddingleft-1" jQuery111103155464015396413="279">
															<li class="list-cn-1-1 list-cn-paddingleft-1" jQuery111103155464015396413="280">
															<div class="para" jQuery111103155464015396413="281">
																<font size="5">
																命令式语言。这种语言的语义基础是模拟“数据存储/数据操作”的<a target="_blank" jQuery111103155464015396413="282" href="http://baike.baidu.com/view/117065.htm">图灵机</a>可计算模型，十分符合现代计算机<a target="_blank" jQuery111103155464015396413="283" href="http://baike.baidu.com/view/1188494.htm">体系结构</a>的自然实现方式。其中产生操作的主要途径是依赖语句或命令产生的副作用。现代流行的大多数语言都是这一类型，比如 
																<a target="_blank" jQuery111103155464015396413="284" href="http://baike.baidu.com/view/36402.htm">
																Fortran</a>、<a target="_blank" jQuery111103155464015396413="285" href="http://baike.baidu.com/view/9355.htm">Pascal</a>、<a target="_blank" jQuery111103155464015396413="286" href="http://baike.baidu.com/view/90933.htm">Cobol</a>、<a target="_blank" jQuery111103155464015396413="287" href="http://baike.baidu.com/view/10075.htm">C</a>、<a target="_blank" jQuery111103155464015396413="288" href="http://baike.baidu.com/view/824.htm">C++</a>、<a target="_blank" jQuery111103155464015396413="289" href="http://baike.baidu.com/view/7334.htm">Basic</a>、<a target="_blank" jQuery111103155464015396413="290" href="http://baike.baidu.com/view/163225.htm">Ada</a>、<a target="_blank" jQuery111103155464015396413="291" href="http://baike.baidu.com/view/29.htm">Java</a>、<a target="_blank" jQuery111103155464015396413="292" href="http://baike.baidu.com/view/6590.htm">C#</a> 
																等，各种<a target="_blank" jQuery111103155464015396413="293" href="http://baike.baidu.com/view/76320.htm">脚本语言</a>也被看作是此种类型。</font></div>
															</li>
															<li class="list-cn-1-2 list-cn-paddingleft-1" jQuery111103155464015396413="294">
															<div class="para" jQuery111103155464015396413="295">
																<font size="5">
																函数式语言。这种语言的语义基础是基于数学函数概念的值映射的λ算子可计算模型。这种语言非常适合于进行人工智能等工作的计算。典型的函数式语言如 
																<a target="_blank" jQuery111103155464015396413="296" href="http://baike.baidu.com/view/293795.htm">
																Lisp</a>、<a target="_blank" jQuery111103155464015396413="297" href="http://baike.baidu.com/view/765704.htm">Haskell</a>、<a target="_blank" jQuery111103155464015396413="298" href="http://baike.baidu.com/view/6572.htm">ML</a>、<a target="_blank" jQuery111103155464015396413="299" href="http://baike.baidu.com/view/459697.htm">Scheme</a> 
																、F#等。</font></div>
															</li>
															<li class="list-cn-1-3 list-cn-paddingleft-1" jQuery111103155464015396413="300">
															<div class="para" jQuery111103155464015396413="301">
																<font size="5">
																逻辑式语言。这种语言的语义基础是基于一组已知规则的形式逻辑系统。这种语言主要用在专家系统的实现中。最著名的逻辑式语言是 
																<a target="_blank" jQuery111103155464015396413="302" href="http://baike.baidu.com/view/459700.htm">
																Prolog</a>。</font></div>
															</li>
															<li class="list-cn-1-4 list-cn-paddingleft-1" jQuery111103155464015396413="303">
															<div class="para" jQuery111103155464015396413="304">
																<font size="5">
																面向对象语言。现代语言中的大多数都提供<a target="_blank" jQuery111103155464015396413="305" href="http://baike.baidu.com/view/125370.htm">面向对象</a>的支持，但有些语言是直接建立在面向对象基本模型上的，语言的语法形式的语义就是基本对象操作。主要的纯面向对象语言是 
																<a target="_blank" jQuery111103155464015396413="306" href="http://baike.baidu.com/view/76337.htm">
																Smalltalk</a>。</font></div>
															</li>
														</ol>
													</div>
												</div>
											</div>
										</div>
										<pre>（以下来自wikipedia High-level programming language）</pre>
									</div>
								</div>
							</div>
						</div>
						<div id="content10" class="mw-body" role="main">
							<div id="bodyContent1" class="mw-body-content">
								<div dir="ltr" id="mw-content-text1" lang="en" class="mw-content-ltr">
									<h2>
									<span id="Execution_modes" class="mw-headline">
									Execution modes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a title="Edit section: Execution modes" href="https://en.wikipedia.org/w/index.php?title=High-level_programming_language&action=edit&section=4">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
									<p>There are three general modes of 
									execution for modern high-level languages:</p>
									<dl>
										<dt>Interpreted&nbsp;</dt>
										<dd>When code written in a language is
										<a title="Interpreted language" href="https://en.wikipedia.org/wiki/Interpreted_language">
										interpreted</a>, its syntax is read and 
										then executed directly, with no 
										compilation stage. A program called an
										<i>interpreter</i> reads each program 
										statement, following the program flow, 
										then decides what to do, and does it. A 
										hybrid of an interpreter and a compiler 
										will compile the statement into machine 
										code and execute that; the machine code 
										is then discarded, to be interpreted 
										anew if the line is executed again. 
										Interpreters are commonly the simplest 
										implementations of the behavior of a 
										language, compared to the other two 
										variants listed here.</dd>
										<dt>Compiled&nbsp;</dt>
										<dd>When code written in a language is
										<a title="Compiled language" href="https://en.wikipedia.org/wiki/Compiled_language">
										compiled</a>, its syntax is transformed 
										into an executable form before running. 
										There are two types of compilation: 
										<dl>
											<dt>Machine code generation&nbsp;</dt>
											<dd>Some compilers compile source 
											code directly into
											<a title="Machine code" href="https://en.wikipedia.org/wiki/Machine_code">
											machine code</a>. This is the 
											original mode of compilation, and 
											languages that are directly and 
											completely transformed to 
											machine-native code in this way may 
											be called "truly compiled" 
											languages. See
											<a title="Assembly language" href="https://en.wikipedia.org/wiki/Assembly_language">
											assembly language</a>.</dd>
											<dt>Intermediate representations&nbsp;</dt>
											<dd>When code written in a language 
											is compiled to an intermediate 
											representation, that representation 
											can be optimized or saved for later 
											execution without the need to 
											re-read the source file. When the 
											intermediate representation is 
											saved, it may be in a form such as
											<a class="mw-redirect" title="Byte code" href="https://en.wikipedia.org/wiki/Byte_code">
											byte code</a>. The intermediate 
											representation must then be 
											interpreted or further compiled to 
											execute it.
											<a title="Virtual machine" href="https://en.wikipedia.org/wiki/Virtual_machine">
											Virtual machines</a> that execute 
											byte code directly or transform it 
											further into machine code have 
											blurred the once clear distinction 
											between intermediate representations 
											and truly compiled languages.</dd>
										</dl>
										</dd>
									</dl>
									<dl>
										<dt>Source-to-Source Translated or 
										Trans-compiled</dt>
										<dd>Code written in a language may be 
										translated into terms of a lower-level 
										programming language for which native 
										code compilers are already widely 
										available. The
										<a title="C (programming language)" href="https://en.wikipedia.org/wiki/C_(programming_language)">
										C programming language</a> is a common 
										target for such translators. See
										<a class="mw-redirect" title="Chicken Scheme" href="https://en.wikipedia.org/wiki/Chicken_Scheme">
										Chicken Scheme</a> and the
										<a title="Eiffel (programming language)" href="https://en.wikipedia.org/wiki/Eiffel_(programming_language)">
										Eiffel</a> as examples. Specifically, 
										the generated C and C++ code can be seen 
										(as generated from the Eiffel 
										programming language when using the
										<a title="EiffelStudio" href="https://en.wikipedia.org/wiki/EiffelStudio">
										EiffelStudio</a> IDE) in the EIFGENs 
										directory of any compiled Eiffel 
										project. In Eiffel, the "Translated" 
										process is referred to as 
										Trans-compiling or Trans-compiled, and 
										the Eiffel compiler as a
										<a title="Source-to-source compiler" href="https://en.wikipedia.org/wiki/Source-to-source_compiler">
										Transcompiler</a>.</dd>
									</dl>
								</div>
							</div>
						</div>
						<p>　</div>
				</div>
			</div>
		</div>
	</div>
</div>

			<!-- #EndEditable --></div>
		<!--Main Content Area Ends Here--></div>
	<!-- Columns Container ends here -->
	<!-- Footer begins here -->
	<div id="footer">
		
		<p class="smltxt">模板来自于:
		<a href="http://www.genealogy-web-creations.com/" title="Genealogy Web Creations.">
		Genealogy Web Creations</a> </p>
		<p class="smltxt">Template Updated: May 2015 </p>
		<p class="smltxt"><a href="http://www.miitbeian.gov.cn/" title="备案后">京ICP备15041520号</a></p>
	</div>
	<!-- Footer ends here -->
	<!-- Page Container ends here --></div>

</body>

<!-- #EndTemplate -->

</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- #BeginTemplate "../sopc_template.dwt" -->

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<meta content="IE=Edge" http-equiv="X-UA-Compatible" />
<!-- #BeginEditable "doctitle" -->
<title>SoPC例子</title>
<!-- #EndEditable -->
<!-- #BeginEditable "description" -->
<meta content="insert DESCRIPTION here" name="description" />
<!-- #EndEditable -->
<meta content="en-us" http-equiv="Content-Language" />
<meta content="General" name="rating" />
<meta content="no" http-equiv="imagetoolbar" />
<meta content="Copyright 2015, Pat Geary  http://genealogy-web-creations.com/ All Rights Reserved" name="copyright" />
<!-- 
*********************************
Design by: Genealogy Web Creations
http://www.genealogy-web-creations.com/
Release Date: May 2015
*********************************
-->
<!-- main css -->
<link href="../../styles/site.css" rel="stylesheet" type="text/css" />
<!-- media queries css -->
<link href="../../styles/media-queries.css" rel="stylesheet" type="text/css" />
<!-- css3-mediaqueries.js for IE less than 9 --><!--[if lt IE 9]>
<script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js">


</script>
<![endif]-->
<meta content="width=device-width; initial-scale=1.0" name="viewport" />
</head>

<body>

<!-- Page Container begins here -->
<div id="outerWrapper">
	<!-- Masthead begins here -->
	<div id="header">
		<img alt="" src="../../images/title_pic.png" style="height: 170px; width: 699px" /></div>
	<!-- Masthead ends here -->
	<!-- Top Navigation begins here -->
	<div id="topNavigation">
		<ul>
			<li><a href="../../index.html" title="Home">主页</a></li>
			<li><a href="../../about.html" title="About">关于</a></li>
			<li><a href="../../contact.html" title="Contact">联系</a></li>
			<li><a href="../../links.html" title="Links">课程</a></li>
			<li><a href="../../search.html" title="Search">搜索</a></li>
			<li><a href="../../site-map.html" title="Site Map">站点地图</a></li>
		</ul>
	</div>
	<!-- Top Navigation ends here -->
	<!-- Columns Container begins here -->
	<div id="contentWrapper">
		<!-- Left Sidebar Begins Here	-->
		<div id="leftColumn1">
			<!--	Sectional Menu Begins Here	-->
			<p class="heading">课程</p>
			<ul>
				<li><a href="../目录.htm" title="SOPC">SOPC</a></li>
				<li><a href="../../embeddedsys/coming.html" title="嵌入式系统应用">嵌入式系统应用</a></li>
				<li><a href="../../ecircuit/from-name.htm" title="电子线路设计">电子线路设计</a></li>
			</ul>
			
			<!--	Sectional Menu ends Here	-->
			<p class="heading">教学相长</p>
			<p>认真教书，认真学习</p>
		</div>
		<!-- Left Sidebar ends Here	-->
		<!--Main Content Area Begins Here-->
		<div id="content">
			<div style="color: red; background-color: #000000;"  >
					<div id="content1" onclick="document.all.child1.style.display=(document.all.child1.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第一章 概述</div> 
					<div id="child1" align="left" style="display:none"> 
						1.<a href="../SOPC基本概念.htm">SOPC系统的基本概念</a> <br> 
						2.<a href="../IP-core.htm">IP核</a> <br> 
						3.<a href="../sopc-dev-process.htm">SOPC开发基本流程</a> <br> 
						4.<a href="../NiosII-introduction.htm">Nios II处理器介绍</a> <br>
						5.<a href="../FPGA-implemented-sopc.htm">用FPGA实现SOPC</a><br>
						6.<a href="../nios-app.htm">应用</a><br>
					</div> 
					
					<div id="content2" onclick="document.all.child2.style.display=(document.all.child2.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第二章 Nios II处理器体系结构 </div> 
					<div id="child2" align="left" style="display:none"> 
						1.<a href="../NiosII-architecture.htm">Nios II处理器结构</a> <br> 
						2.<a href="../Nios-architecture/nios-register.htm">Nios II寄存器的配置</a> <br> 
						3.<a href="../Nios-architecture/nios-alu.htm">ALU</a> <br>
						4.<a href="../Nios-architecture/operating-modes.htm">Nios II处理器运行模式及</a><br>
						  <a href="../Nios-architecture/exception.htm">异常和中断</a> <br>
						5.<a href="../Nios-architecture/memory.htm">存储器和外设访问</a><br>
						附录：<a href="../Nios-architecture/implement-cpu-instruction.htm">计算机指令执行</a><br>
					</div> 
					<div id="content3" onclick="document.all.child3.style.display=(document.all.child3.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第三章 Avalon接口规范 </div> 
					<div id="child3" style="display:none"> 
						1.<a href="../avalon/avalon-introduction.htm">Avalon总线简介</a> <br> 
						2.<a href="../avalon/avalon-concept.htm">Avalon总线基本概念</a> <br> 
						3.<a href="../avalon/avalon-signal.htm">Avalon信号</a>  <br>
						4.<a href="../avalon/avalon-slave.htm">从端口传输</a> <br>
						5.<a href="../avalon/avalon-master.htm">主端口传输</a> <br>
						6.<a href="../avalon/avalon-streaming.htm">流水线传输</a> <br>
						7.<a href="../avalon/avalon-tristate.htm">三态传输</a> <br>
					</div> 
					
					<div id="content4" onclick="document.all.child5.style.display=(document.all.child5.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第四章 SOPC软硬件开发平台 </div> 
					<div id="child5" style="display:none"> 
						1.<a href="sopc-dev-platform.htm">SOPC系统开发的软硬件平台</a> <br> 
						2.<a href="#">Quartus II下的SOPC Builder工具</a>(Qsys) <br> 
						3.<a href="#">Nios II IDE集成开发环境</a><br>
						4.<a href="software/HAL/Nios_HAL.htm">软硬件接口的硬件抽象层（HAL)</a><br>
						5.<a href="example-list.htm">例子</a>
					</div> 
					
					<div id="content5" onclick="document.all.child4.style.display=(document.all.child4.style.display =='none')?'':'none'" > 
					第五章 Nios II处理器常用外设 </div> 
					<div id="child4" style="display:none"> 
						1.<a href="#">并行I/O</a>(重点讲解结构) <br> 
						2.<a href="#">定时器</a> <br> 
						3.<a href="#">异步串口UART</a> <br>
						4.<a href="#">Optrex 1207 LCD</a><br>
						5.<a href="devices/SDRAM.htm">SDRAM</a>
					</div> 
					
					<div id="content6" onclick="document.all.child6.style.display=(document.all.child6.style.display =='none')?'':'none'" > 
					第六章 μC/OS II操作系统移植 </div> 
					<div id="child6" style="display:none"> 
						1.<a href="software/os/os.htm">操作系统概念</a> <br> 
						2.<a href="software/os/ucos/first_ucos.htm">μC/OS II运行在Nios II</a> <br> 
						3.<a href="software/os/ucos/ucos_api.htm">μC/OS II编程介绍</a> 
					</div> 
					
					<div id="content8" onclick="document.all.child7.style.display=(document.all.child7.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第七章 Nios II系统深入设计 </div> 
					<div id="child7" style="display:none"> 
						1.<a href="hardware/user_instructions/user_instructions.htm">用户定制指令</a> <br> 
						2.<a href="develop_user_devices.htm">用户定制外设</a> 
					</div>
					
					<div id="content8" onclick="document.all.child8.style.display=(document.all.child8.style.display =='none')?'':'none'" > 
					<font face="楷体" size="4">第八章 调试技术 </div> 
					<div id="child8" style="display:none"> 
						1.<a href="../debug-tech/hardware/ModelSim/modelsim_introduction.htm">ModelSim</a><br>
						2.<a href="../debug-tech/hardware/signaltap/signaltap_introduction.htm">SignalTap</a><br>
						3.Nios EDS调试<br> 
					</div> 
			</div>
			<hr/>
			<!-- #BeginEditable "content" -->
			
<p><b><font size="7">SoPC例子</font></b></p>
<p><i><font size="5">注：例子保存在sopc-sample目录下</font></i></p>
<p><font size="5">1、工程目录：<b>firstprj</b> 或者 <b>keytobeep</b></font></p>
<p><font size="5">说明：此例子功能是<a href="../firstprj/fristprj.htm">按key1蜂鸣器响</a>，例子是用VHDL语言编写的逻辑，可以在用原理图做同样的例子。</font></p>
<p><font size="5">
注：在KeytoBeep目录下有singaltap目录，里面有signaltap逻辑分析仪的配置文件，可以查看引出管脚的波形变化。</font></p>
<p><font size="5">延伸：</font></p>
<p><font size="5">
用原理图做的可以生产VHDL文件（源程序在firstprj-sch目录下），在工程中把原来的原理图文件移除，将转换后的VHD文件加入，可以通过修改VHDL文件修改程序逻辑。</font></p>
<p><font size="5">对于VHDL文件可以在Quartus软件中的【Tools】菜单下的【Netlist Viewers】下的【RTL 
viewer】中看到对应的原理图，但只能输入*。jpg等类似格式，但是不能用原理图修改逻辑。</font></p>
<p><font size="5">
将VHDL生产原理图，用原理图来修改逻辑的方法是，打开VHDL文件,选【File】→【Creat/Update】→【Create Symbol Files 
for Current File】，然后选【File】→【New】,在【Device Design Files】下选【Block 
Diagram/Schematic File】<br>
空白处双击，选择刚刚建立的符号名即可，但是此处加入的是一个Symbol，也就是将刚才的VHDL中的逻辑封装成一个组件（Symbol）了，而且以前的VHDL文件不能移除。</font></p>
<p><font size="5">2、工程目录：<b>firstprj-twokeys</b></font></p>
<p><font size="5">说明：同时按下key1和key2，蜂鸣器响。</font></p>
<p><font size="5">3、工程目录：<b>KeyToLED</b></font></p>
<p><font size="5">说明：按下一个按键，两个对应的LED灯亮，按键和LED灯的对应关系如下：</font></p>
<p><font size="5">//key0 control LED0 and LED4<br>
//key1 control LED1 and LED5<br>
//key2 control LED2 and LED6<br>
//key3 control LED3 and LED7<br>
4、工程目录：<b>LED</b></font></p>
<p><font size="5">说明：使用计数器延时来控制发光二极管（LED）流水式点亮。</font></p>
<p><font size="5">注：</font></p>
<p><font size="5">1)signaltap目录下有逻辑分析仪的配置文件，可以演示，并有抓图。</font></p>
<p><font size="5">
2)在simulation下的modelsim目录下，有针对此工程的modelsim软件的配置文件，可以演示基于modelsim的仿真。</font></p>
<p><font size="5">5、工程目录：<b>LCD1602</b></font></p>
<p><font size="5">说明：使用LCD1602显示“LCD Example in BUU SoPC 
class”，硬件逻辑描述在RTL目录下，共四个文件，其中LCD_Driver.v中确定显示的文字。</font></p>

<p><font size="5">
6、工程目录：<b>bin2bcd</b></font></p>
<p><font size="5">
使用四个拨码开关控制八个LED，用四个拨码开关来表示二进制码，八个LED表示BCD码。按照二进制转化成BCD码的转换原则，通过拨码开关得到二进制，在led上显示相应的BCD码。</font></p>
<p><font size="5">
7、工程目录：<b>SegLed_DynamDisp</b></font></p>
<p><font size="5">
用四个数码管显示“987654321”并且开窗显示，窗口大小四个字符，窗口移动方向从右向左。</font></p>

<p><font size="5">8、工程目录：<b>first_cpu</b></font></p>
<p><font size="5">说明： 讲解如何搭建第一个Nios系统，硬件配置是Nios+JTAG UART+sysid+片内RAM（10240 
bytes），软件功能是C程序通过JTAG_UART返回Hello BUU from Nios II!</font></p>
<p><font size="5">9、工程目录：<b>Nios_PIO</b></font></p>
<p><font size="5">说明： 搭建一个Nios系统，硬件配置Nios+JTAG UART+sysid+片内RAM（10240 
bytes）+PIO（控制LED），将PIO与开发板上的LED灯相接， 
软件功能是控制流水灯显示。延伸：可对C程序进行改造，加入j变量，控制显示次数，将以前的while(1)改为while(j!=某个数)来实现，同时在循环体中j++。同时注意在C程序中用到函数【IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 
led);】来对I/O操作，其中LED_BASE是LED灯的地址，此地址在驱动程序中system.h定义，#define LED_BASE 
0x9000，而这个地址起始定义是在用Qsys设计Nios时确定的。</font></p>
<p>　</p>
<p><font size="5">10、工程目录：<b>Qsys_SDRAM</b></font></p>
<p><font size="5">说明：搭建Nios系统，硬件配置Nios+JTAG UART+sysid+SDRAM 
Controller+PIO（控制LED），软件功能是控制LED流水灯，此工程与Nios_PIO的区别是使用了片外SDRAM。</font></p>
<p><font size="5">11、工程目录：<b>Qsys_TIME</b></font></p>
<p><font size="5">说明：搭建Nios系统，硬件配置Nios+JTAG UART+sysid+片内RAM（10240 
bytes）+PIO（控制LED）+Internal Timer，软件功能是利用定时器，控制LED流水灯。</font></p>
<p><font size="5">延伸：此例子特别强调中断的使用，在添加timer后，需要给其分配中断号。</font></p>
<p>　</p>
<p><font size="5">12、工程目录：<b>Qsys_TIME</b></font></p>
<p><font size="5">说明：搭建Nios系统，硬件配置Nios+JTAG UART+sysid+片内RAM（10240 
bytes）+PIO（控制LED）+Internal Timer，软件功能是利用定时器，控制LED流水灯。</font></p>
<p><font size="5">延伸：此例子特别强调中断的使用，在添加timer后，需要给其分配中断号。</font></p>
<p><font size="5">13、工程目录：<b>Qsys_ucosii</b></font></p>
<p><font size="5">说明：搭建Nios系统，硬件配置Nios+JTAG UART+sysid+SDRAM 
Controller+PIO（控制LED）+Internal Timer，软件功能是利用μc/os 
实时操作系统，创建两个任务，任务1执行时向stdout输出“Hello from task1”，然后延时3秒，任务2执行时向stdout输出“Hello 
from task2”，然后延时3秒。</font></p>
<p><font size="5">14、工程目录：<b>TFT_ColorBar_V2.0</b></font></p>
<p><font size="5">说明：用Quartus编写TFT彩屏程序，此程序驱动TFT彩色显示屏显示彩条。</font></p>
<p>　</p>
<p><font size="5">15、工程目录：<b>TFT_PIC_e6</b></font></p>
<p><font size="5">
说明：用Quartus编写TFT彩屏程序，利用altsyncram生产片内RAM，此程序驱动TFT彩色显示屏显示RAM中的一幅图片。</font></p>
<p><font size="5">16、工程目录：<b>VGA</b></font></p>
<p><font size="5">说明：用Quartus编写程序，此程序驱动VGA显示彩条。</font></p>
<p><font size="5">17、工程目录：<b>LED7_IP</b></font></p>
<p><font size="5">
说明：此例子首先通过Qsys创建一个组件模板，然后在模板中根据地址控制输出为高或者为低，生产的组件是BUU下的LED1。构建Nios系统，配置为：Nios+JTAG 
UART+sysid+片内RAM（10240 
bytes）+LED1。软件功能是首先熄灭LED灯，延时1秒，然后点亮led灯，然后读LED灯的状态，并向stdout打印led灯状态，然后用另外一个地址熄灭led灯（具体控制在组件vhdl文件中），延时1秒然后点亮len灯，延时1秒，熄灭led灯。</font></p>
<p><font size="5">延伸：通过此例子可以详细讲解signaltap的使用，在工程目录下的signaltap目录下有signaltap 
逻辑分析器的配置文件。</font></p>
<p><font size="5">18、工程目录：<b>ug_custom_instruction\ciug_de_qsys</b></font></p>
<p><font size="5">说明：这是一个Altera网站上的用户指令的例子，网站上提供的是Quartus 15版本做的，需要在Quartus 
11中重新建立工程，然后加入相关文件。此例子用用户指令实现CRC（Cyclic Redundancy Check）(循环冗余校验码)。</font></p>
<p><font size="5">回顾：</font></p>
<p><font size="5">循环冗余校验码（CRC）的基本原理是：在K位信息码后再拼接R位的校验码，整个编码长度为N位，因此，这种编码也叫（N，K）码。</font></p>
<p><font size="5">
对于一个给定的（N，K）码，可以证明存在一个最高次幂为N-K=R的多项式G(x)。根据G(x)可以生成K位信息的校验码，而G(x)叫做这个CRC码的生成多项式。 
</font></p>
<p><font size="5">
校验码的具体生成过程为：假设要发送的信息用多项式C(X)表示，将C(x)左移R位（可表示成C(x)*2R），这样C(x)的右边就会空出R位，这就是校验码的位置。用 
C(x)*2R 除以生成多项式G(x)得到的余数就是校验码。 
任意一个由二进制位串组成的代码都可以和一个系数仅为‘0’和‘1’取值的多项式一一对应。例如：代码1010111对应的多项式为x6+x4+x2+x+1，而多项式为x5+x3+x2+x+1对应的代码101111。</font></p>
<p>　</p>
<p>　</p>

			<!-- #EndEditable --></div>
		<!--Main Content Area Ends Here--></div>
	<!-- Columns Container ends here -->
	<!-- Footer begins here -->
	<div id="footer">
		
		<p class="smltxt">模板来自于:
		<a href="http://www.genealogy-web-creations.com/" title="Genealogy Web Creations.">
		Genealogy Web Creations</a> </p>
		<p class="smltxt">Template Updated: May 2015 </p>
		<p class="smltxt"><a href="http://www.miitbeian.gov.cn/" title="备案后">京ICP备15041520号</a></p>
	</div>
	<!-- Footer ends here -->
	<!-- Page Container ends here --></div>

</body>

<!-- #EndTemplate -->

</html>
